####   Prepare the dataframe for catch-rate data in the VAST format
##################################################
Data_Geostat <- data.frame( "spp" = data$SPECIES_NAME,
"Year" = data$YEAR,
"Catch_KG" = data$WEIGHT,
"AreaSwept_km2" = data$EFFORT,
"Vessel" = 0,
"Lat" = data$LATITUDE,
"Lon" = data$LONGITUDE,
stringsAsFactors = T)
Data_Geostat[, c("LOG_DEPTH", "LOG_DEPTH2") ] <-
data[, c("LOG_DEPTH_EFH_CEN", "LOG_DEPTH_EFH_CEN_SQ")]
##################################################
####   Assign 10 fold partitions of the data
##################################################
n_fold <- 10
years <- paste0(unique(Data_Geostat$Year))
NTime <- length(unique(Data_Geostat$Year))
#Create unique stationID from the latlon. To make sure the ids are unique,
#we use the table function to make sure there are 7900 records (as of 2019)=
Data_Geostat$latlon <- paste0(Data_Geostat$Lat, Data_Geostat$Lon)
table(table(Data_Geostat$latlon))
#split Data_Geostat by year, then on each year-split, randomly assign
#fold numbers to the each unique station
set.seed(2342)
foldno <- lapply(
#Split Data_Geostat by Year
X = split.data.frame(Data_Geostat,
f = Data_Geostat$Year),
#For each year split, randomly assign fold numbers so that each year is
#equally split into n_folds folds
FUN = function(x) {
unique_loc <- unique(x$latlon)
fold_no <- sample(x = 1:n_fold,
size = length(unique_loc),
replace = T)
return(split(unique_loc, fold_no))
})
#Attach fold number to the Data_Geostat
for (iyear in years) {
for (ifold in paste(1:n_fold)) {
Data_Geostat[Data_Geostat$latlon %in% foldno[[iyear]][[ifold]] ,
"fold"] = as.integer(ifold)
}
}
#Columns should roughly have the same number of samples
table(Data_Geostat$fold, Data_Geostat$Year)
##################################################
####   Spatial settings: The following settings define the spatial resolution
####   for the model, and whether to use a grid or mesh approximation
####   Stratification for results
##################################################
settings <- FishStatsUtils::make_settings(
n_x = 500,   # Number of knots
Region = "User", #User inputted extrapolation grid
purpose = "index2",
fine_scale = TRUE,
strata.limits =  data.frame("STRATA" = c("All_areas"),
"west_border" = -Inf,
"east_border" = Inf),
bias.correct = FALSE,
FieldConfig = c(
"Omega1" = 1,   #Spatial random effect on occurence
"Epsilon1" = 1, #Spatiotemporal random effect on occurence
"Omega2" = 1,   #Spatial random effect on positive response
"Epsilon2" = 1  #Spatiotemporal random effect on positive response
),
RhoConfig = c("Beta1" = 0,
"Beta2" = 0,
"Epsilon1" = 0,
"Epsilon2" = 0), #Each year is a fixed effect
OverdispersionConfig = c("Eta1" = 0,
"Eta2" = 0), #Turn off overdispersion
"Options" = c("Calculate_Range" = F,
"Calculate_effective_area" = F),
ObsModel = c(2, 0),
max_cells = Inf,
use_anisotropy = T)
##################################################
####   Import "true" and not interpolated covariate
####   data if using depth covariates
##################################################
load( paste0(github_dir, "data/Extrapolation_depths.RData"))
n_g <- nrow(Extrapolation_depths) #number of grid cells
n_t <- diff(range(Data_Geostat$Year)) + 1 #Number of total years
n_p <- 2 #two density covariates
X_gtp <- array(dim = c(n_g, n_t, n_p) )
for (i in 1:n_t) {
X_gtp[, i, ] <-
as.matrix(Extrapolation_depths[,c("LOG_DEPTH_EFH_CEN",
"LOG_DEPTH_EFH_CEN_SQ")])
}
##################################################
####   Fit the model and save output
##################################################
fit = switch(paste0(depth_in_model),
"FALSE" = FishStatsUtils::fit_model(
"settings" = settings,
"working_dir" = result_dir,
"Lat_i" = Data_Geostat[, "Lat"],
"Lon_i" = Data_Geostat[, "Lon"],
"t_i" = Data_Geostat[, "Year"],
"c_i" = as.numeric(Data_Geostat[, "spp"]) - 1,
"b_i" = Data_Geostat[, "Catch_KG"],
"a_i" = Data_Geostat[, "AreaSwept_km2"],
"v_i" = Data_Geostat[, "Vessel"],
"getJointPrecision" = TRUE,
"newtonsteps" = 1,
"test_fit" = F,
"input_grid" = Extrapolation_depths),
"TRUE" = FishStatsUtils::fit_model(
"settings" = settings,
"working_dir" = result_dir,
"Lat_i" = Data_Geostat[, "Lat"],
"Lon_i" = Data_Geostat[, "Lon"],
"t_i" = Data_Geostat[, "Year"],
"c_i" = as.numeric(Data_Geostat[, "spp"]) - 1,
"b_i" = Data_Geostat[, "Catch_KG"],
"a_i" = Data_Geostat[, "AreaSwept_km2"],
"v_i" = Data_Geostat[, "Vessel"],
"getJointPrecision" = TRUE,
"newtonsteps" = 1,
"test_fit" = F,
"input_grid" = Extrapolation_depths,
##Additional arguments for covariates
"X1_formula" =  "Catch_KG ~ LOG_DEPTH + LOG_DEPTH2",
"X2_formula" =  "Catch_KG ~ LOG_DEPTH + LOG_DEPTH2",
"covariate_data" = cbind(Data_Geostat[,c("Lat",
"Lon",
"LOG_DEPTH",
"LOG_DEPTH2",
"Catch_KG")],
Year = NA),
"X_gtp" = X_gtp )
)
##################################################
####   Save
##################################################
save(list = c("fit", "Data_Geostat"),
file = paste0(result_dir, "/fit.RData"))
##################################################
####   10-fold Cross Validation
##################################################
n_fold <- 10
for (fI in 1:n_fold) {
if (!dir.exists(paste0(result_dir, "CV_", fI))) {
dir.create(paste0(result_dir, "CV_", fI))
file.copy(from = paste0(result_dir, get_latest_version(),
c(".cpp", ".dll", ".o")),
to = paste0(result_dir, "CV_", fI, "/",
get_latest_version(),
c(".cpp", ".dll", ".o")))
}
}
# Loop through partitions, refitting each time with a different PredTF_i
for (fI in 1:n_fold ) {
PredTF_i <- ifelse( test = Data_Geostat$fold == fI,
yes = TRUE,
no = FALSE )
fit_new = switch(paste0(depth_in_model),
"FALSE" = FishStatsUtils::fit_model(
"settings" = settings,
"working_dir" = paste0(result_dir, "CV_", fI, "/"),
"Lat_i" = Data_Geostat[, "Lat"],
"Lon_i" = Data_Geostat[, "Lon"],
"t_i" = Data_Geostat[, "Year"],
"c_i" = as.numeric(Data_Geostat[, "spp"]) - 1,
"b_i" = Data_Geostat[, "Catch_KG"],
"a_i" = Data_Geostat[, "AreaSwept_km2"],
"v_i" = Data_Geostat[, "Vessel"],
"getJointPrecision" = TRUE,
"newtonsteps" = 1,
"test_fit" = F,
"input_grid" = Extrapolation_depths,
"PredTF_i" = PredTF_i,
"Parameters" = fit$ParHat,
"getsd" = T),
"TRUE" = FishStatsUtils::fit_model(
"settings" = settings,
"working_dir" = paste0(result_dir, "CV_", fI, "/"),
"Lat_i" = Data_Geostat[, "Lat"],
"Lon_i" = Data_Geostat[, "Lon"],
"t_i" = Data_Geostat[, "Year"],
"c_i" = as.numeric(Data_Geostat[, "spp"]) - 1,
"b_i" = Data_Geostat[, "Catch_KG"],
"a_i" = Data_Geostat[, "AreaSwept_km2"],
"v_i" = Data_Geostat[, "Vessel"],
"getJointPrecision" = TRUE,
"newtonsteps" = 1,
"test_fit" = F,
"input_grid" = Extrapolation_depths,
"PredTF_i" = PredTF_i,
"Parameters" = fit$ParHat,
"getsd" = T,
##Additional arguments for covariates
"X1_formula" =  "Catch_KG ~ LOG_DEPTH + LOG_DEPTH2",
"X2_formula" =  "Catch_KG ~ LOG_DEPTH + LOG_DEPTH2",
"covariate_data" = cbind(Data_Geostat[,c("Lat",
"Lon",
"LOG_DEPTH",
"LOG_DEPTH2",
"Catch_KG")],
Year = NA),
"X_gtp" = X_gtp )
)
# Save fit
save(list = "fit_new",
file = paste0(result_dir, "CV_", fI, "/fit.RData"))
}
}
}
###############################################################################
## Project:       Spatiotemporal Survey Optimization
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Conduct SamplingStrata R package multispecies stratified
##                survey optimization
###############################################################################
rm(list = ls())
##################################################
####  Install a forked version of the SamplingStrata Package from
####  zoyafuso-NOAA's Github page
####
####  Import other required packages
##################################################
library(devtools)
devtools::install_github(repo = "zoyafuso-NOAA/SamplingStrata")
library(SamplingStrata)
library(sp)
library(RColorBrewer)
library(raster)
##################################################
####   Set up directories based on whether the optimization is being conducted
####        on a multi-species or single-species level
##################################################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[3]
github_dir <- paste0(c("/Users/zackoyafuso/Documents",
"C:/Users/Zack Oyafuso/Documents",
"C:/Users/zack.oyafuso/Work")[which_machine],
"/GitHub/Optimal_Allocation_GoA/")
##################################################
####   Load Data
####   Load Population CVs for use in the thresholds
##################################################
load(paste0(github_dir, "/data/optimization_data.RData"))
load(paste0(github_dir, "/data/Extrapolation_depths.RData"))
##################################################
####   Constants to specify before doing optimization
##################################################
which_domain <- c("full_domain", "district")[1]
which_species = 14
##################################################
####   Constants to set up based on which_domain and which_species
##################################################
frame <- switch( which_domain,
"full_domain" = frame_all,
"district" = frame_district)[, c("domainvalue", "id",
"X1", "X2", "WEIGHT",
paste0("Y", which_species),
paste0("Y", which_species,
"_SQ_SUM"))]
names(frame)[6:7] <- paste0("Y", c("1", "1_SQ_SUM") )
n_dom <- length(unique(frame$domainvalue))
no_strata <- switch(which_domain,
"full_domain" = 10,
"district" = rep(5, n_dom))
result_dir = paste0(github_dir,
"results/", which_domain,
"/Single_Species_Optimization/",
gsub(x = sci_names_all[which_species],
pattern = ' ',
replacement = '_'), '/')
result_dir
source('~/GitHub/Optimal_Allocation_GoA/analysis_scripts/Survey_Optimization.R', echo=TRUE)
###############################################################################
## Project:       Spatiotemporal Survey Optimization
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Conduct SamplingStrata R package multispecies stratified
##                survey optimization
###############################################################################
rm(list = ls())
##################################################
####  Install a forked version of the SamplingStrata Package from
####  zoyafuso-NOAA's Github page
####
####  Import other required packages
##################################################
library(devtools)
devtools::install_github(repo = "zoyafuso-NOAA/SamplingStrata")
library(SamplingStrata)
library(sp)
library(RColorBrewer)
library(raster)
##################################################
####   Set up directories based on whether the optimization is being conducted
####        on a multi-species or single-species level
##################################################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[3]
github_dir <- paste0(c("/Users/zackoyafuso/Documents",
"C:/Users/Zack Oyafuso/Documents",
"C:/Users/zack.oyafuso/Work")[which_machine],
"/GitHub/Optimal_Allocation_GoA/")
##################################################
####   Load Data
####   Load Population CVs for use in the thresholds
##################################################
load(paste0(github_dir, "/data/optimization_data.RData"))
load(paste0(github_dir, "/data/Extrapolation_depths.RData"))
##################################################
####   Create optimization scenarios
##################################################
scen <- data.frame(nstrata = c(3,5, 10,15),
which_domain = rep(c("district", "full_domain"), each = 2))
##################################################
####   Collect optimization results from each strata
##################################################
for (irow in 2) {
for(isample in 1:n_boats) {
##################################################
####   Constants to specify before doing optimization
##################################################
which_domain <- scen$which_domain[irow]
frame <- switch( which_domain,
"full_domain" = frame_all,
"district" = frame_district)[, c("domainvalue", "id",
"X1", "X2", "WEIGHT",
paste0("Y", spp_idx_opt),
paste0("Y", spp_idx_opt,
"_SQ_SUM"))]
names(frame)[names(frame) %in% paste0("Y", spp_idx_opt)] <-
paste0("Y", 1:ns_opt)
names(frame)[names(frame) %in% paste0("Y", spp_idx_opt, "_SQ_SUM")] <-
paste0("Y", 1:ns_opt, "_SQ_SUM")
n_dom <- length(unique(frame$domainvalue))
temp_strata <- rep(x = scen$nstrata[irow], times = n_dom)
##Initial Condition
run <- 1
current_n <- 0
## Initiate CVs to be those calculated under SRS
srs_stats <- SamplingStrata::buildStrataDF(
dataset = cbind( subset(frame, select = -c(X1, X2)),
X1 = 1))
srs_n <- as.numeric(samples[isample] * table(frame$domainvalue) / n_cells)
srs_var <- as.matrix(srs_stats[, paste0("S", 1:ns_opt)])^2
srs_var <- sweep(x = srs_var,
MARGIN = 1,
STATS = (1 - srs_n / n_cells) / srs_n,
FUN = "*")
srs_cv <- sqrt(srs_var) / srs_stats[, paste0("M", 1:ns_opt)]
cv_constraints <- srs_cv
cv <- list()
for (spp in 1:ns_opt)
cv[[paste0("CV", spp)]] <-
as.numeric(switch(which_domain,
"district" = cv_constraints[, spp],
"full_domain" = cv_constraints[spp]))
cv[["DOM"]] <- 1:n_dom
cv[["domainvalue"]] <- 1:n_dom
cv <- as.data.frame(cv)
load(paste0(github_dir, "results/", which_domain,
"/Single_Species_Optimization/",
"optimization_knitted_results.RData"))
ss_strs_pop_cv <-
switch(which_domain,
"district" = t(subset(x = settings_district_district,
subset = (boat == isample) &
(spp %in% spp_idx_opt),
select = paste(1:5))),
"full_domain" = unlist(subset(x = settings_agg_full_domain,
subset = boat == isample &
spp %in% spp_idx_opt,
select = cv)))
##################################################
####   Run optimization
##################################################
while (current_n <= c(280, 550, 820)[isample] ) {
#Set wd for output files, create a directory if it doesn"t exist yet
temp_dir = paste0(github_dir, "results/", which_domain,
"/Multi_Species_Optimization/boat", isample,
"/Str", temp_strata[1], "/Run", run)
if(!dir.exists(temp_dir)) dir.create(temp_dir, recursive = T)
setwd(temp_dir)
#Run optimization
if(which_domain == "full_domain") par(mfrow = c(6,6),
mar = c(2,2,0,0))
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 300,
pops = 50,
elitism_rate = 0.1,
mut_chance = 1 / (temp_strata[1] + 1),
nStrata = temp_strata,
showPlot = T,
writeFiles = T)
sum_stats <- summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
#Plot Solution
plot_solution <- as.factor(paste(solution$framenew$DOMAINVALUE,
solution$framenew$STRATO))
plot_solution <- as.integer(plot_solution)
goa <- sp::SpatialPointsDataFrame(
coords = Extrapolation_depths[,c("Lon", "Lat")],
data = data.frame(Str_no = plot_solution) )
goa_ras <- raster::raster(x = goa,
resolution = 0.075)
goa_ras <- raster::rasterize(x = goa,
y = goa_ras,
field = "Str_no")
png(filename = "solution.png",
width = 5,
height = 3,
units = "in",
res = 500)
par(mfrow = c(1, 1),
mar = c(1, 1, 1, 1))
plot( goa_ras,
axes = F,
asp = 1,
col = colorRampPalette(
brewer.pal(n = 11,
name = "Paired"))(sum(temp_strata))[sample(1:sum(temp_strata))] )
rect(xleft = districts$W_lon,
xright = districts$E_lon,
ybottom = tapply(X = Extrapolation_depths$Lat,
INDEX = district_vals,
FUN = min),
ytop = tapply(X = Extrapolation_depths$Lat,
INDEX = district_vals,
FUN = max))
text(x = rowMeans(districts[, c("W_lon", "E_lon")]),
y = tapply(X = Extrapolation_depths$Lat,
INDEX = district_vals,
FUN = max),
labels = districts$district,
pos = 3)
box()
dev.off()
# png(filename = "solution_with_simulated_survey.png",
#     width = 5,
#     height = 3,
#     units = "in",
#     res = 500)
#
# par(mfrow = c(1, 1),
#     mar = c(1, 1, 1, 1))
# plot( goa_ras,
#       axes = F,
#       asp = 1,
#       col = colorRampPalette(
#         brewer.pal(n = 11,
#                    name = "Paired"))(sum(temp_strata))[sample(1:sum(temp_strata))] )
#
# rect(xleft = districts$W_lon,
#      xright = districts$E_lon,
#      ybottom = tapply(X = Extrapolation_depths$Lat,
#                       INDEX = district_vals,
#                       FUN = min),
#      ytop = tapply(X = Extrapolation_depths$Lat,
#                    INDEX = district_vals,
#                    FUN = max))
#
# text(x = rowMeans(districts[, c("W_lon", "E_lon")]),
#      y = tapply(X = Extrapolation_depths$Lat,
#                 INDEX = district_vals,
#                 FUN = max),
#      labels = districts$district,
#      pos = 3)
#
# box()
#
# #Simulate a sample solution
# temp_samples <- c()
# temp_strata <- nrow(sum_stats)
# temp_solution <- solution$framenew$STRATO
# temp_allocation <- sum_stats$Allocation
#
# for (temp_istrata in 1:temp_strata) {
#   temp_samples = c(temp_samples,
#                    sample(x = which(temp_solution == temp_istrata),
#                           size = temp_allocation[temp_istrata]) )
# }
#
# temp_loc <- Extrapolation_depths[temp_samples, c("Lon", "Lat")]
#
# points(temp_loc,
#        pch = 16,
#        cex = 0.25)
#
#
# dev.off()
#Save Output
cv_constraints <- expected_CV(strata = solution$aggr_strata)
current_n <- sum(sum_stats$Allocation)
result_list <- list(solution = solution,
sum_stats = sum_stats,
cv_constraints = cv_constraints,
n = current_n)
save(list = "result_list", file = "result_list.RData")
#Set up next run by changing upper CV constraints
run <- run + 1
cv_constraints <- 0.95 * cv_constraints + 0.05 * ss_strs_pop_cv
#Create CV dataframe in the formmat of SamplingStrata
cv <- list()
for (spp in 1:ns_opt)
cv[[paste0("CV", spp)]] <- as.numeric(cv_constraints[, spp])
cv[["DOM"]] <- 1:n_dom
cv[["domainvalue"]] <- 1:n_dom
cv <- as.data.frame(cv)
}
}
}
