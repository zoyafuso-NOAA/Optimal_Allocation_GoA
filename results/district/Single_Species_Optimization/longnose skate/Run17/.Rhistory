FUN = mean)$CPUE
RMSE[, 2:3] / mean_cpue
gsub(x = grep(x = dir(VAST_dir), pattern = "_depth", value = TRUE),
pattern = "_depth",
replacement = "")
###############################################################################
## Project:       Cross-Validation Results
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   For each CV run, calculate relative root mean squre error of
##                density predictions
###############################################################################
rm(list = ls())
##################################################
####   Import Libraries
##################################################
library(VAST)
library(RANN)
library(tidyr)
##################################################
####   Set up directores
##################################################
VAST_dir <-  "G:/Oyafuso/VAST_Runs_EFH/Single_Species_conventional_delta/"
VAST_data_dir <-  "C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/"
github_dir <- "C:/Users/zack.oyafuso/Work/GitHub/Optimal_Allocation_GoA/"
##################################
## Import Strata Allocations and spatial grid and predicted density
##################################
load(paste0(github_dir, "data/Extrapolation_depths.RData"))
goa_data <- read.csv(paste0(VAST_data_dir, "data/GOA_multspp.csv"))
which_spp <- gsub(x = grep(x = dir(VAST_dir), pattern = "_depth", value = TRUE),
pattern = "_depth",
replacement = "")[5]
ns <- length(which_spp)
n_folds <- 10
n_years <- 11
##################################################
####   Result Objects
##################################################
cv_df <- expand.grid(species = which_spp,
depth = c(T, F),
fold = 1:n_folds,
stringsAsFactors = F)
cv_df[,c("max_grad", "pdHess", "bound_check", "pred_nll",
"RMSE", "RRMSE", "MAE", "RMAE")] <- NA
for (irow in (1:nrow(cv_df)) ) {
#Load fitted object
result_dir <- paste0(VAST_dir, cv_df$species[irow],
ifelse(cv_df$depth[irow],  "_depth", ""), "/")
filename <- paste0(result_dir, "CV_", cv_df$fold[irow], "/fit.RData")
if ( file.exists(filename) ){
## Load crossvalidation result and assign temporary result objects
load(filename)
pars <- fit_new$parameter_estimates
temp_df <- fit_new$data_frame
#Final Gradient
cv_df$max_grad[irow] <- max(abs(pars$diagnostics$final_gradient))
#Check whether hessian matrix is positive definite
cv_df$pdHess[irow] <- pars$SD$pdHess
#check_fit chekcs bounds, TRUE is bad and FALSE is good
cv_df$bound_check[irow] <- check_fit(pars)
cv_df$pred_nll[irow] <- fit_new$Report$pred_jnll
#Extract observed and predicted cpue of the withheld data
withheld_idx <- which(fit_new$data_list$PredTF_i == T)
obs_cpue <- (temp_df$b_i / temp_df$a_i)[withheld_idx]
pred_cpue <- fit_new$Report$D_i[withheld_idx]
#Calculate mean absolute error and root mean square error
cv_df$MAE[irow] = mean(abs(obs_cpue - pred_cpue))
cv_df$RMSE[irow] <- sqrt(mean((obs_cpue - pred_cpue)^2))
#Calculate mean obs density for calculation of RRMSE and RMAE
cv_df$RRMSE[irow] <- cv_df$RMSE[irow] / mean(obs_cpue)
cv_df$RMAE[irow] <- cv_df$MAE[irow] / mean(obs_cpue)
#Update progress
print(paste0("Done with: ", cv_df$species[irow], ", ",
ifelse(cv_df$depth[irow], "Depth, ", "No Depth, "),
"Fold Number ", cv_df$fold[irow]))
}
}
##################################################
####  Calculate summed predicted NLL across folds and Mean RRMSE across folds
##################################################
tidyr::spread(data = aggregate(pred_nll ~ species + depth,
data = cv_df,
FUN = sum),
key = "depth",
value = "pred_nll")
RMAE <- tidyr::spread(data = aggregate(RMAE ~ species + depth,
data = cv_df,
FUN = mean),
key = "depth",
value = "RMAE")
RMAE$depth_in_model <- c(F, T)[apply(X = RMAE[,-1],
MARGIN = 1,
FUN = which.min)]
RMSE <- tidyr::spread(data = aggregate(RMSE ~ species + depth,
data = cv_df,
FUN = function(x) sqrt(mean(x^2))),
key = "depth",
value = "RMSE")
goa_data$CPUE <- goa_data$WEIGHT / goa_data$EFFORT
mean_cpue <- aggregate(CPUE ~ COMMON_NAME ,
data = goa_data,
subset = COMMON_NAME == "Pacific cod",
FUN = mean)$CPUE
RMSE[, 2:3] / mean_cpue
##################################################
#### Set up directories
##################################################
rm(list = ls())
which_machine <- c("Zack_PC" = 1, "Zack_GI_PC" = 2)[2]
github_dir <- c("C:/Users/Zack Oyafuso/Documents/GitHub/MS_OM_GoA/",
"C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/")[which_machine]
VAST_dir <- c("C:/Users/Zack Oyafuso/Desktop/VAST_Runs/Single_Species/",
"G:/Oyafuso/VAST_Runs_EFH/Single_Species/")[which_machine]
##################################################
####  Import Libraries
##################################################
library(VAST)
library(raster)
library(sp)
library(rgdal)
library(RColorBrewer)
library(plotrix)
library(rnaturalearth)
##################################################
#### Set up directories
##################################################
rm(list = ls())
which_machine <- c("Zack_PC" = 1, "Zack_GI_PC" = 2)[2]
github_dir <- c("C:/Users/Zack Oyafuso/Documents/GitHub/MS_OM_GoA/",
"C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/")[which_machine]
github_dir2 <- paste0(c("C:/Users/Zack Oyafuso/Documents/",
"C:/Users/zack.oyafuso/Work/")[which_machine],
"GitHub/Optimal_Allocation_GoA/")
VAST_dir <- c("C:/Users/Zack Oyafuso/Desktop/VAST_Runs/Single_Species/",
"G:/Oyafuso/VAST_Runs_EFH/Single_Species/")[which_machine]
output_dir <- paste0(github_dir, "appendix_plots/")
##################################################
#### Import relevant libraries
##################################################
library(sp)
library(rgdal)
library(raster)
library(DHARMa)
library(RColorBrewer)
library(VAST)
##################################################
#### Load Data
##################################################
load(paste0(github_dir, "data/Extrapolation_depths.RData"))
##################################################
#### Some plotting constants
##################################################
xrange <- range(Extrapolation_depths[, "E_km"])
yrange <- range(Extrapolation_depths[, "N_km"])
xrange_diff <- diff(xrange)
yrange_diff <- diff(yrange)
dir(VAST_dir)
grep(x = dir(VAST_dir), pattern = "_depth" )
grep(x = dir(VAST_dir), pattern = "_depth", value = TRUE )
gsub(x = grep(x = dir(VAST_dir), pattern = "_depth", value = TRUE ),
pattern = "_depth",
replacement = "")
spp_names <- gsub(x = grep(x = dir(VAST_dir),
pattern = "_depth",
value = TRUE ),
pattern = "_depth",
replacement = "")
###############################################################################
## Project:       VAST diagnostics plots
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Calculate various diagnostic plots
##                Year-specific density
##                Spatial (omega) and spatiotemporal (epsilon) effects
##                QQ plots
##                Pearson Residuals
###############################################################################
##################################################
#### Set up directories
##################################################
rm(list = ls())
which_machine <- c("Zack_PC" = 1, "Zack_GI_PC" = 2)[2]
github_dir <- c("C:/Users/Zack Oyafuso/Documents/GitHub/MS_OM_GoA/",
"C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/")[which_machine]
github_dir2 <- paste0(c("C:/Users/Zack Oyafuso/Documents/",
"C:/Users/zack.oyafuso/Work/")[which_machine],
"GitHub/Optimal_Allocation_GoA/")
VAST_dir <- c("C:/Users/Zack Oyafuso/Desktop/VAST_Runs/Single_Species/",
"G:/Oyafuso/VAST_Runs_EFH/Single_Species/")[which_machine]
output_dir <- paste0(github_dir, "appendix_plots/")
if(!dir.exists(output_dir)) dir.create(path = output_dir)
##################################################
#### Import relevant libraries
##################################################
library(sp)
library(rgdal)
library(raster)
library(DHARMa)
library(RColorBrewer)
library(VAST)
##################################################
#### Load Data
##################################################
load(paste0(github_dir, "data/Extrapolation_depths.RData"))
# load(paste0(github_dir2, "data/RRMSE_VAST_models.RData"))
##################################################
#### Some plotting constants
##################################################
xrange <- range(Extrapolation_depths[, "E_km"])
yrange <- range(Extrapolation_depths[, "N_km"])
xrange_diff <- diff(xrange)
yrange_diff <- diff(yrange)
plot_spp_names <- gsub(x = grep(x = dir(VAST_dir),
pattern = "_depth",
value = TRUE ),
pattern = "_depth",
replacement = "")
plot_spp_names
plot_spp_names
load("G:/Oyafuso/VAST_Runs_EFH/Single_Species_conventional_delta/Beringraja spp/fit.RData")
fit_nodepth <- fit
load("G:/Oyafuso/VAST_Runs_EFH/Single_Species_conventional_delta/Beringraja spp_depth/fit.RData")
fit_depth <- fit
cor(fit_nodepth$Report$D_i, fit_depth$Report$D_i)
fit_nodepth$Report$jnll
fit_depth$Report$jnll
load("G:/Oyafuso/VAST_Runs_EFH/Single_Species_conventional_delta/Glyptocephalus zachirus/fit.RData")
fit_nodepth <- fit
load("G:/Oyafuso/VAST_Runs_EFH/Single_Species_conventional_delta/Glyptocephalus zachirus_depth/fit.RData")
fit_depth <- fit
cor(fit_nodepth$Report$D_i, fit_depth$Report$D_i)
fit_nodepth$Report$jnll
fit_depth$Report$jnll
install.packages(c("aqp", "boot", "class", "cli", "cluster", "codetools", "devtools", "DHARMa", "foreign", "gh", "KernSmooth", "MASS", "mgcv", "nlme", "nnet", "pkgload", "processx", "rbibutils", "remotes", "spatial", "spdep", "survival", "TMB"))
install.packages("memoise", version = "1.1.0")
devtools::install_github(repo = "zoyafuso-NOAA/SamplingStrata")
library(memoise)
packageVersion("memoise")
detach("package:memoise", unload = TRUE)
install.packages("memoise", version = "1.1.0")
install.packages("memoise", version = "1.1.0")
packageVersion("memoise")
devtools::install_github("r-lib/memoise@1.1.0")
library(memoise)
###############################################################################
## Project:       Spatiotemporal Survey Optimization
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Conduct SamplingStrata R package multispecies stratified
##                survey optimization
###############################################################################
rm(list = ls())
##################################################
####  Install a forked version of the SamplingStrata Package from
####  zoyafuso-NOAA's Github page
####
####  Import other required packages
##################################################
library(devtools)
devtools::install_github(repo = "zoyafuso-NOAA/SamplingStrata")
packageVersion("doParallel")
##################################################
####   Import Libraries
##################################################
library(VAST)
library(RANN)
library(tidyr)
##################################################
####   Set up directores
##################################################
VAST_dir <-  "G:/Oyafuso/VAST_Runs_EFH/Single_Species_conventional_delta/"
VAST_data_dir <-  "C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/"
github_dir <- "C:/Users/zack.oyafuso/Work/GitHub/Optimal_Allocation_GoA/"
# VAST_dir <-  "C:/Users/Zack Oyafuso/Desktop/VAST_Runs/Single_Species/"
# VAST_data_dir <-  "C:/Users/Zack Oyafuso/Documents/GitHub/MS_OM_GoA/"
# github_dir <- "C:/Users/Zack Oyafuso/Documents/GitHub/Optimal_Allocation_GoA/"
##################################
## Import Strata Allocations and spatial grid and predicted density
##################################
load(paste0(github_dir, "data/Extrapolation_depths.RData"))
goa_data <- read.csv(paste0(VAST_data_dir, "data/GOA_multspp.csv"))
which_spp <- gsub(x = grep(x = dir(VAST_dir), pattern = "_depth", value = TRUE),
pattern = "_depth",
replacement = "")
ns <- length(which_spp)
n_folds <- 10
n_years <- length(unique(goa_data$YEAR))
which_years <- min(unique(goa_data$YEAR)):max(unique(goa_data$YEAR))
which_years <- which_years %in% unique(goa_data$YEAR)
##################################################
####   Result Objects
##################################################
cv_df <- expand.grid(species = which_spp,
depth = c(T, F),
fold = 1:n_folds,
stringsAsFactors = F)
cv_df[,c("max_grad", "pdHess", "pred_nll", "RMSE")] <- NA
# for (irow in seq(length.out = nrow(cv_df))[is.na(cv_df$pdHess)] )  {
for (irow in 1:nrow(cv_df) )  {
# for (irow in 132)  {
#Load fitted object
result_dir <- paste0(VAST_dir, cv_df$species[irow],
ifelse(cv_df$depth[irow],  "_depth", ""), "/")
filename <- paste0(result_dir, "CV_", cv_df$fold[irow], "/fit.RData")
if ( file.exists(filename) ){
## Load crossvalidation result and assign temporary result objects
load(filename)
pars <- fit_new$parameter_estimates
temp_df <- fit_new$data_frame
#Final Gradient
cv_df$max_grad[irow] <- max(abs(pars$diagnostics$final_gradient))
#Check whether hessian matrix is positive definite
cv_df$pdHess[irow] <- pars$SD$pdHess
#Extract the out-of-bag predicted NLL
cv_df$pred_nll[irow] <- fit_new$Report$pred_jnll
#Extract observed and predicted cpue of the withheld data
withheld_idx <- which(fit_new$data_list$PredTF_i == T)
obs_cpue <- (temp_df$b_i / temp_df$a_i)[withheld_idx]
pred_cpue <- fit_new$Report$D_i[withheld_idx]
#Calculate mean absolute error and root mean square error
cv_df$RMSE[irow] <- sqrt(mean((obs_cpue - pred_cpue)^2))
#Update progress
print(paste0("Done with: ", cv_df$species[irow], ", ",
ifelse(cv_df$depth[irow], "Depth, ", "No Depth, "),
"Fold Number ", cv_df$fold[irow]))
}
}
##################################################
####   Calculate how many of the folds converged with < 1E-5
##################################################
tidyr::spread(data = aggregate(max_grad ~ species + depth,
data = cv_df,
FUN = function(x) sum(x < 1E-4)),
key = "depth",
value = "max_grad")
##################################################
####  Calculate mean out-of-bag predicted NLL across folds
##################################################
prednll <- tidyr::spread(data = aggregate(pred_nll ~ species + depth,
data = cv_df,
FUN = function(x) round(mean(x)),
subset = max_grad < 1E-4),
key = "depth",
value = "pred_nll")
prednll$depth_in_model <- apply(X = prednll[, c("FALSE", "TRUE")],
MARGIN = 1,
FUN = function(x) c("FALSE", "TRUE")[which.min(x)] )
RMSE <- tidyr::spread(data = aggregate(RMSE ~ species + depth,
data = cv_df,
FUN = function(x) round(sqrt(mean(x^2))),
subset = max_grad < 1E-4),
key = "depth",
value = "RMSE")
prednll
RMSE
###############################################################################
## Project:       Cross-Validation Results
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   For each CV run, calculate relative root mean squre error of
##                density predictions
###############################################################################
rm(list = ls())
##################################################
####   Import Libraries
##################################################
library(VAST)
library(RANN)
library(tidyr)
VAST_dir <-  "C:/Users/Zack Oyafuso/Desktop/VAST_Runs/Single_Species/"
VAST_data_dir <-  "C:/Users/Zack Oyafuso/Documents/GitHub/MS_OM_GoA/"
github_dir <- "C:/Users/Zack Oyafuso/Documents/GitHub/Optimal_Allocation_GoA/"
##################################
## Import Strata Allocations and spatial grid and predicted density
##################################
load(paste0(github_dir, "data/Extrapolation_depths.RData"))
goa_data <- read.csv(paste0(VAST_data_dir, "data/GOA_multspp.csv"))
which_spp <- gsub(x = grep(x = dir(VAST_dir), pattern = "_depth", value = TRUE),
pattern = "_depth",
replacement = "")
###############################################################################
## Project:       Spatiotemporal Survey Optimization
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Conduct SamplingStrata R package multispecies stratified
##                survey optimization
###############################################################################
rm(list = ls())
##################################################
####  Install a forked version of the SamplingStrata Package from
####  zoyafuso-NOAA's Github page
####
####  Import other required packages
##################################################
library(devtools)
devtools::install_github(repo = "zoyafuso-NOAA/SamplingStrata")
library(SamplingStrata)
library(sp)
library(RColorBrewer)
library(raster)
##################################################
####   Set up directories based on whether the optimization is being conducted
####        on a multi-species or single-species level
##################################################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[3]
github_dir <- paste0(c("/Users/zackoyafuso/Documents",
"C:/Users/Zack Oyafuso/Documents",
"C:/Users/zack.oyafuso/Work")[which_machine],
"/GitHub/Optimal_Allocation_GoA/")
##################################################
####   Load Data
####   Load Population CVs for use in the thresholds
##################################################
load(paste0(github_dir, "/data/optimization_data.RData"))
load(paste0(github_dir, "/data/Extrapolation_depths.RData"))
##################################################
####   Constants to specify before doing optimization
##################################################
which_domain <- c("full_domain", "district")[2]
for (which_species in spp_idx_opt[11]) {
##################################################
}
frame <- switch( which_domain,
"full_domain" = frame_all,
"district" = frame_district)[, c("domainvalue", "id",
"X1", "X2", "WEIGHT",
paste0("Y", which_species),
paste0("Y", which_species,
"_SQ_SUM"))]
names(frame)[6:7] <- paste0("Y", c("1", "1_SQ_SUM") )
n_dom <- length(unique(frame$domainvalue))
no_strata <- switch(which_domain,
"full_domain" = 10,
"district" = rep(5, n_dom))
result_dir = paste0(github_dir,
"results/", which_domain,
"/Single_Species_Optimization/",
common_names_all[which_species], '/')
if(!dir.exists(result_dir)) dir.create(path = result_dir, recursive = T)
result_dir
common_names_opt
###############################################################################
## Project:       Spatiotemporal Survey Optimization
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Conduct SamplingStrata R package multispecies stratified
##                survey optimization
###############################################################################
rm(list = ls())
##################################################
####  Install a forked version of the SamplingStrata Package from
####  zoyafuso-NOAA's Github page
####
####  Import other required packages
##################################################
library(devtools)
devtools::install_github(repo = "zoyafuso-NOAA/SamplingStrata")
library(SamplingStrata)
library(sp)
library(RColorBrewer)
library(raster)
##################################################
####   Set up directories based on whether the optimization is being conducted
####        on a multi-species or single-species level
##################################################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[3]
github_dir <- paste0(c("/Users/zackoyafuso/Documents",
"C:/Users/Zack Oyafuso/Documents",
"C:/Users/zack.oyafuso/Work")[which_machine],
"/GitHub/Optimal_Allocation_GoA/")
##################################################
####   Load Data
####   Load Population CVs for use in the thresholds
##################################################
load(paste0(github_dir, "/data/optimization_data.RData"))
load(paste0(github_dir, "/data/Extrapolation_depths.RData"))
##################################################
####   Constants to specify before doing optimization
##################################################
which_domain <- c("full_domain", "district")[2]
for (which_species in spp_idx_opt[12]) {
}
##################################################
####   Constants to set up based on which_domain and which_species
##################################################
frame <- switch( which_domain,
"full_domain" = frame_all,
"district" = frame_district)[, c("domainvalue", "id",
"X1", "X2", "WEIGHT",
paste0("Y", which_species),
paste0("Y", which_species,
"_SQ_SUM"))]
names(frame)[6:7] <- paste0("Y", c("1", "1_SQ_SUM") )
n_dom <- length(unique(frame$domainvalue))
no_strata <- switch(which_domain,
"full_domain" = 10,
"district" = rep(5, n_dom))
result_dir = paste0(github_dir,
"results/", which_domain,
"/Single_Species_Optimization/",
common_names_all[which_species], '/')
result_dir
run = 18
#Set wd for output files, create a directory if it doesn"t exist yet
temp_dir = paste0(result_dir, "Run", run)
if(!dir.exists(temp_dir)) dir.create(temp_dir, recursive = T)
setwd(temp_dir)
## Set up next run by changing slightly reducing the CV constraints
## CVs are reduced proportionally, based on the effort level
load("result_list.RData")
CV_constraints <- result_list$CV_constraints
current_n <- result_list$n
current_n
source('~/.active-rstudio-document', echo=TRUE)
common_names_eval[8:9]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
