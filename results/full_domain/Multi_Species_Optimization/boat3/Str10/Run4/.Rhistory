###################################
## Residual Plot
###################################
DHARMa::plotResiduals(dharmaRes,
rank = TRUE,
ann = F,
xlim = c(0, 1))
mtext(side = 1,
line = 2,
text = "Rank-Transformed Model Predictions",
cex = 0.6)
mtext(side = 2,
line = 2,
text = "Standardized\nResidual",
cex = 0.6)
box(which = "figure")
text(x = -0.3,
y = 1.05,
label = "F)",
xpd = NA,
cex = 1.25)
#############################
## Residuals in Space
#############################
goa = sp::SpatialPointsDataFrame(
coords = fit$spatial_list$loc_i,
data = data.frame(PIT = dharmaRes$scaledResiduals) )
goa_ras = raster::raster(x = goa,
resolution = 15)
goa_ras = raster::rasterize(x = goa,
y = goa_ras,
field = "PIT")
par(mar = c(1, 1, 1, 1))
image(goa_ras,
col = RColorBrewer::brewer.pal(n = 11, name = "RdBu"),
zlim = c(0, 1),
axes = F,
ann = F,
asp = 1)
box(which = "figure")
## Legend
plotrix::color.legend(
xl = xrange[1] + xrange_diff *  0.25,
xr = xrange[1] + xrange_diff *  0.75,
yb = yrange[1] + yrange_diff * -0.30,
yt = yrange[1] + yrange_diff * -0.15,
legend = seq(from = 0, to = 1, by = 0.25),
rect.col = RColorBrewer::brewer.pal(n = 11, name = "RdBu"),
gradient = "x",
align = "rb",
cex = 0.5)
text(x = xrange[1] + xrange_diff * 0,
y = yrange[2] + yrange_diff * 0.35,
labels = "G)",
xpd = NA,
cex = 1.25)
dev.off()
}
##################################################
#### Set up directories
##################################################
rm(list = ls())
which_machine <- c("Zack_PC" = 1, "Zack_GI_PC" = 2)[2]
github_dir <- c("C:/Users/Zack Oyafuso/Documents/GitHub/MS_OM_GoA/",
"C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/")[which_machine]
github_dir2 <- paste0(c("C:/Users/Zack Oyafuso/Documents/",
"C:/Users/zack.oyafuso/Work/")[which_machine],
"GitHub/Optimal_Allocation_GoA/")
VAST_dir <- c("C:/Users/Zack Oyafuso/Desktop/VAST_Runs/Single_Species/",
"G:/Oyafuso/VAST_Runs_EFH/Single_Species/")[which_machine]
output_dir <- paste0(github_dir, "appendix_plots/")
if(!dir.exists(output_dir)) dir.create(path = output_dir)
##################################################
#### Import relevant libraries
##################################################
library(sp)
library(rgdal)
library(raster)
library(DHARMa)
library(RColorBrewer)
library(VAST)
##################################################
#### Load Data
##################################################
load(paste0(github_dir, "data/Extrapolation_depths.RData"))
load(paste0(github_dir2, "data/RRMSE_VAST_models.RData"))
##################################################
#### Some plotting constants
##################################################
xrange <- range(Extrapolation_depths[, "E_km"])
yrange <- range(Extrapolation_depths[, "N_km"])
xrange_diff <- diff(xrange)
yrange_diff <- diff(yrange)
RRMSE$common_name <- c(
"sablefish"
, "arrowtooth flounder", "skates spp.", "Alaska pollock",
"Pacific cod", "rex sole", "flathead sole", "Pacific halibut",
"southern rock sole", "northern rock sole", "Pacific Dover sole",
"Octopus spp.", "Atka mackerel", "Pacific ocean perch",
"blackspotted/rougheye rockfishes", "shortraker rockfish",
"silvergrey rockfish", "northern rockfish", "dusky rockfish",
"harlequin rockfish", "shortspine thornyhead", "spiny dogfish"
)
plot_spp_names <- gsub(x = RRMSE$species,
pattern = "\\.",
replacement = "" )
#################################################
#### Loop over species
##################################################
# for (which_spp in 2) {
for (which_spp in 1:nrow(RRMSE)) {
###################################
## Set up png plot
###################################
plot_filename <- paste0(output_dir, plot_spp_names[which_spp], "_VAST.png")
png(filename = plot_filename,
width = 170,
height = 220,
units = "mm",
res = 500,
family = "serif")
###################################
## Set up plot layout
###################################
layout(mat = matrix(data = c(1, 2, 2, 3:8),
ncol = 3,
byrow = T),
heights = c(1.2, 4, 1),
widths = c(1, 1, 1))
par(mar = c(0, 0, 0, 0),
oma = c(0.1, 0.1, 0.1, 0.1))
###################################
## load VAST fit according to the model (depth or no depth as covariate)
## with the "best" (i.e., lower RRMSE) predictive performance
###################################
depth_in_model <- RRMSE$depth_in_model[which_spp]
result_dir <- paste0(VAST_dir,
RRMSE$species[which_spp],
ifelse(test = depth_in_model,
yes = "_depth",
no = ""))
load(paste0(result_dir, "/fit.RData"))
##################################################
#### Extract objects from fitted object
#### Set up constants
##################################################
data_geostat <- fit$data_frame
names(data_geostat)[c(1:2, 5:7)] <- c("Lat", "Lon", "Catch_KG", "Year", "spp")
report <- fit$Report
year_set <- seq(min(data_geostat[, "Year"]),
max(data_geostat[, "Year"]))
years_included <- which( year_set %in% sort(unique(data_geostat[, "Year"])))
#For spatial/spatiotemporal plots
colors = rev(brewer.pal(n = 11, name = "Spectral"))
######################################
## Spatial Effects
######################################
## Base Layer
plot(1,
type = "n",
xlim = range(Extrapolation_depths$E_km),
ylim = with(Extrapolation_depths,
c(min(N_km) + 0.0 * yrange_diff,
max(N_km) + 1.25 * yrange_diff)),
axes = F,
ann = F,
asp = 1)
box()
mtext(side = 3,
text = "A) Spatial Effect (Top: Pos. Resp.\nBottom: Prob. of Occ.)",
line = -2.8,
cex = 0.8)
for (omegatype in 1:2){ #Two types for the 0/1 and pos components
## Extract spatial component
scaled_var = list(report$Omega1_gc[, 1],
report$Omega2_gc[, 1])[[omegatype]]
## Plot spatial effect
goa = SpatialPointsDataFrame(
coords = Extrapolation_depths[, c("E_km", "N_km")],
data = data.frame(var = scaled_var) )
goa_ras = raster(x = goa,
resolution = 10)
goa_ras = rasterize(x = goa,
y = goa_ras,
field = "var")
offset_y <- 0.6 * yrange_diff * (omegatype - 1)
goa_ras <- raster::shift(x = goa_ras,
dy = offset_y )
zlim_ <- max(abs(scaled_var))
image(goa_ras,
add = T,
col = colors,
asp = 1,
zlim = c(-zlim_, zlim_))
## Legend
plotrix::color.legend(
xl = xrange[1] + xrange_diff * c(0.525, 0)[omegatype],
xr = xrange[1] + xrange_diff * c(0.925, 0.40)[omegatype],
yb = yrange[1] + yrange_diff * c(0.2, 1.4)[omegatype],
yt = yrange[1] + yrange_diff * c(0.3, 1.5)[omegatype],
legend = pretty(((-ceiling(zlim_)):(ceiling(zlim_))), n = 3),
rect.col = colorRampPalette(colors)(1000) ,
gradient = "x",
align = "rb",
cex = 0.5)
}
## Caption Label
plot(1,
type = "n",
xlim = c(0, 10),
ylim = c(0, 1),
axes = F,
ann = F)
text(x = -0.25,
y = 0.5,
labels = paste0(
"Appendix Figure A-", which_spp, ". -- ",
RRMSE$common_name[which_spp], " (depth ",
ifelse(depth_in_model, yes = "included).", no = "excluded)."),
"\n                                        ",
"Various VAST model output and diagnostic plots:",
"\n                                        ",
"A) Spatial random effect",
"\n                                        ",
"B) Spatiotemporal random effect for the occurrence predictor",
"\n                                        ",
"C) Spatiotemporal random effect for the positive response",
"\n                                        ",
"D) Predicted density (kg per square km) across years",
"\n                                        ",
"E) QQ plot of probability integral transform (PIT) residuals",
"\n                                        ",
"F) PIT residuals versus ranked model predictions",
"\n                                        ",
"G) PIT residuals over space"),
cex = 1.1,
adj = 0,
family = "serif")
box()
########################################
## Plot Spatiotemporal Effects
########################################
for(epstype in 1:2){
## Base Layer
plot(1,
type = "n",
xlim = range(Extrapolation_depths$E_km),
ylim = with(Extrapolation_depths,
c(min(N_km) + 0.0*yrange_diff,
max(N_km) + 6*yrange_diff)),
axes = F,
ann = F,
asp = 1)
box()
## Subtitle
mtext(side = 3,
text = c("B) Spatiotemporal Effect\n(Prob. of Occurrence)",
"C) Spatiotemporal Effect\n(Positive Response)")[epstype],
line = -2.5,
cex = 0.8)
## z-lim applied to all plots
zlim_ <- max(abs(
unlist(list(report$Epsilon1_gct[, 1, years_included],
report$Epsilon2_gct[, 1, years_included])[epstype])))
for (iyear in 1:length(years_included)) {
#Extract density values for a species in a year,
vals = list(report$Epsilon1_gct[, 1, years_included[iyear] ],
report$Epsilon2_gct[, 1, years_included[iyear]])[[epstype]]
##plot spatiotemporal effect
goa = sp::SpatialPointsDataFrame(
coords = Extrapolation_depths[, c("E_km", "N_km")],
data = data.frame(density = vals) )
goa_ras = raster::raster(x = goa,
resolution = 10)
goa_ras = raster::rasterize(x = goa,
y = goa_ras,
field = "density")
offset_y <- 0.6 * yrange_diff * (iyear - 1)
goa_ras <- raster::shift(goa_ras,
dy = offset_y )
image(x = goa_ras,
add = T,
axes = F,
ann = F,
zlim = zlim_ * c(-1, 1),
col = colors,
asp = 1)
#Year label
text(x = goa_ras@extent[1] + 0.7 * diff(goa_ras@extent[1:2]),
y = goa_ras@extent[3]+ 0.7 * diff(goa_ras@extent[3:4]),
labels = year_set[years_included[iyear]],
cex = 1)
}
## Add legend
plotrix::color.legend(
xl = xrange[1] + xrange_diff * 0.1,
xr = xrange[1] + xrange_diff * 0.9,
yb = yrange[1] + yrange_diff * -0.4,
yt = yrange[1] + yrange_diff * -0.25,
legend = pretty(((-ceiling(zlim_)):(ceiling(zlim_))), n = 3),
colorRampPalette(colors)(1000) ,
gradient = "x",
align = "rb",
cex = 0.75)
}
########################################
## Predicted Density
########################################
## Base Layer
plot(1,
type = "n",
xlim = range(Extrapolation_depths$E_km),
ylim = with(Extrapolation_depths,
c(min(N_km) + 0.0 * yrange_diff,
max(N_km) + 6 * yrange_diff)),
axes = F,
ann = F,
asp = 1)
box()
## Subtitle
mtext(side = 3,
text = "D) Predicted Density\n(kg/km2)",
line = -2.5,
cex = 0.8)
## Calculate quantiles of the density distribution
vals  = report$D_gct[, 1, years_included]
val_cuts = c(0,quantile(x = vals[vals > 10],
probs = seq(0, 1, length = 9) ))
#Add legend
val_cuts_legend = round(val_cuts[-1])
colors = c("lightgrey", brewer.pal(n = 7, name = "Oranges"), "black")
legend(x = xrange[1],
y = yrange[1] - yrange_diff * 0.15,
fill = colors,
bty = "n",
ncol = 3,
cex = 0.7,
legend = c("< 10", paste0("10-", val_cuts_legend[2]),
paste0(val_cuts_legend[2:(length(val_cuts_legend)-1)], "-",
val_cuts_legend[3:length(val_cuts_legend)])) )
## Loop over years and plot spatial distributions
for (iyear in 1:length(years_included)) {
#Extract density values for a species in a year,
vals  = report$D_gct[, 1, years_included[iyear]]
#plot density
goa = sp::SpatialPointsDataFrame(
coords = Extrapolation_depths[, c("E_km", "N_km")],
data = data.frame(density = vals) )
goa_ras = raster::raster(x = goa,
resolution = 10)
goa_ras = raster::rasterize(x = goa,
y = goa_ras,
field = "density")
#Discretize into quantiles
values(goa_ras) = cut(x = values(goa_ras),
breaks = val_cuts)
offset_y <- 0.6 * yrange_diff * (iyear - 1)
goa_ras <- raster::shift(goa_ras,
dy = offset_y )
#lay image
image(x = goa_ras,
asp = 1,
axes = F,
ann = F,
add = T,
col = colors)
#Year label
text(x = goa_ras@extent[1] + 0.7 * diff(goa_ras@extent[1:2]),
y = goa_ras@extent[3]+ 0.7 * diff(goa_ras@extent[3:4]),
labels = year_set[years_included[iyear]],
cex = 1)
}
## Calculate DHARMa Residuals
dyn.load(paste0(result_dir, "/VAST_v12_0_0.dll"))
dharmaRes = summary( fit, what = "residuals", working_dir = NA )
dyn.unload(paste0(result_dir, "/VAST_v12_0_0.dll"))
par(mar = c(3.5, 4, 1.25, 1))
###################################
## QQ Plot
###################################
gap::qqunif(dharmaRes$scaledResiduals, pch = 2, bty = "n",
logscale = F, col = "black", cex = 0.6,
cex.main = 1, ann = F, cex.axis = 0.8)
mtext(side = 1, line = 2, text = "Expected", cex = 0.7)
mtext(side = 2, line = 2.5, text = "Observed", cex = 0.7)
box()
box(which = "figure")
text(x = -0.31,
y = 1.05,
label = "E)",
xpd = NA,
cex = 1.25)
###################################
## Residual Plot
###################################
DHARMa::plotResiduals(dharmaRes,
rank = TRUE,
ann = F,
xlim = c(0, 1))
mtext(side = 1,
line = 2,
text = "Rank-Transformed Model Predictions",
cex = 0.6)
mtext(side = 2,
line = 2,
text = "Standardized\nResidual",
cex = 0.6)
box(which = "figure")
text(x = -0.3,
y = 1.05,
label = "F)",
xpd = NA,
cex = 1.25)
#############################
## Residuals in Space
#############################
goa = sp::SpatialPointsDataFrame(
coords = fit$spatial_list$loc_i,
data = data.frame(PIT = dharmaRes$scaledResiduals) )
goa_ras = raster::raster(x = goa,
resolution = 15)
goa_ras = raster::rasterize(x = goa,
y = goa_ras,
field = "PIT")
par(mar = c(1, 1, 1, 1))
image(goa_ras,
col = RColorBrewer::brewer.pal(n = 11, name = "RdBu"),
zlim = c(0, 1),
axes = F,
ann = F,
asp = 1)
box(which = "figure")
## Legend
plotrix::color.legend(
xl = xrange[1] + xrange_diff *  0.25,
xr = xrange[1] + xrange_diff *  0.75,
yb = yrange[1] + yrange_diff * -0.30,
yt = yrange[1] + yrange_diff * -0.15,
legend = seq(from = 0, to = 1, by = 0.25),
rect.col = RColorBrewer::brewer.pal(n = 11, name = "RdBu"),
gradient = "x",
align = "rb",
cex = 0.5)
text(x = xrange[1] + xrange_diff * 0,
y = yrange[2] + yrange_diff * 0.35,
labels = "G)",
xpd = NA,
cex = 1.25)
dev.off()
}
###############################################################################
## Project:       Spatiotemporal Survey Optimization
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Conduct SamplingStrata R package multispecies stratified
##                survey optimization
###############################################################################
rm(list = ls())
##################################################
####  Install a forked version of the SamplingStrata Package from
####  zoyafuso-NOAA's Github page
####
####  Import other required packages
##################################################
library(devtools)
devtools::install_github(repo = "zoyafuso-NOAA/SamplingStrata")
library(SamplingStrata)
library(sp)
library(RColorBrewer)
library(raster)
##################################################
####   Set up directories based on whether the optimization is being conducted
####        on a multi-species or single-species level
##################################################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[3]
github_dir <- paste0(c("/Users/zackoyafuso/Documents",
"C:/Users/Zack Oyafuso/Documents",
"C:/Users/zack.oyafuso/Work")[which_machine],
"/GitHub/Optimal_Allocation_GoA/")
##################################################
####   Load Data
####   Load Population CVs for use in the thresholds
##################################################
load(paste0(github_dir, "/data/optimization_data.RData"))
load(paste0(github_dir, "/data/Extrapolation_depths.RData"))
##################################################
####   Constants to specify before doing optimization
##################################################
which_domain <- c("full_domain", "district")[1]
which_species = 8
##################################################
####   Constants to set up based on which_domain and which_species
##################################################
frame <- switch( which_domain,
"full_domain" = frame_all,
"district" = frame_district)[, c("domainvalue", "id",
"X1", "X2", "WEIGHT",
paste0("Y", which_species),
paste0("Y", which_species,
"_SQ_SUM"))]
names(frame)[6:7] <- paste0("Y", c("1", "1_SQ_SUM") )
n_dom <- length(unique(frame$domainvalue))
no_strata <- switch(which_domain,
"full_domain" = 10,
"district" = rep(5, n_dom))
result_dir = paste0(github_dir,
"results/", which_domain,
"/Single_Species_Optimization/",
gsub(x = sci_names_all[which_species],
pattern = ' ',
replacement = '_'), '/')
result_dir
source('~/GitHub/Optimal_Allocation_GoA/analysis_scripts/Survey_Optimization.R', echo=TRUE)
